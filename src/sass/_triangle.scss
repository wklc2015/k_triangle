@charset "UTF-8";
//------------------------------------------------------
// set triangle
//------------------------------------------------------

// basic style
%k-triangle-basic {
	content: '';
	position: absolute;
	width: 0;
	height: 0;
	pointer-events: none;
}

@function k-triangle-css-width($direction, $size) {
	$ret: ();
	@if ($direction == top or $direction == bottom) {
		$ret: $size;
	} @else if ($direction == right or $direction == left) {
		$ret: $size / 2;
	}
	@return $ret;
}

@function k-triangle-css-height($direction, $size) {
	$ret: ();
	@if ($direction == top or $direction == bottom) {
		$ret: $size / 2;
	} @else if ($direction == right or $direction == left) {
		$ret: $size;
	}
	@return $ret;
}
@function k-triangle-css-top($direction) {
	$ret: ();
	@if ($direction == top or $direction == bottom) {
		$ret: 1px;
	} @else if ($direction == right or $direction == left) {
		$ret: 2px;
	}
	@return $ret;
}

@function k-triangle-css-left($direction) {
	$ret: ();
	@if ($direction == top or $direction == bottom) {
		$ret: 2px;
	} @else if ($direction == right or $direction == left) {
		$ret: 1px;
	}
	@return $ret;
}

@mixin k-triangle-border($direction, $size, $bgColor) {
	@if ($direction == top or $direction == bottom) {
		border-left: $size dashed transparent;
		border-right: $size dashed transparent;
	} @else if ($direction == right or $direction == left) {
		border-top: $size dashed transparent;
		border-bottom: $size dashed transparent;
	}
	border-#{$direction}: $size solid $bgColor;
}

@mixin k-triangle($direction: top, $size:10px, $bgColor: #ccc, $borderColor: false, $scaleX: false, $scaleY: false) {
	position: relative;
	display: inline-block;
	vertical-align: middle;

	$borderSize: $size / 2;

	width: k-triangle-css-width($direction, $size);
	height: k-triangle-css-height($direction, $size);

	@if ($borderColor) {
		&:before {
			@extend %k-triangle-basic;
			@include k-triangle-border($direction, $borderSize, $borderColor);
			left: 0;
			top: 0;
			z-index: 1;
		}
		&:after{
			@extend %k-triangle-basic;
			@include k-triangle-border($direction, $borderSize - 2, $bgColor);
			left: k-triangle-css-left($direction);
			top: k-triangle-css-top($direction);
			z-index: 2;
		}
	} @else {
		&:after {
			@extend %k-triangle-basic;
			@include k-triangle-border($direction, $borderSize, $bgColor);
			left: 0;
			top: 0;
		}
	}

}
@mixin k-triangle-position($direcition, $scaleX, $scaleY){
	$transform_scale : if($scaleX, scaleX($scaleX), ()) if($scaleY, scaleX($scaleY), ());
	$transform_translate : ();
	$transform_rotate: rotate(180deg);
	@if ($direcition == 'top') {
		left: 50%;
		$transform_translate : translate(-50%, -100%);
	} @else if ($direcition == 'left') {
		top: 50%;
		$transform_translate : translate(-100%, -50%);
	} @else if ($direcition == 'bottom') {
		left: 50%;
		$transform_translate : translate(-50%, 100%);
	} @else if ($direcition == 'right') {
		top: 50%;
		$transform_translate : translate(100%, -50%);
	}
	@include transform($transform_translate $transform_scale $transform_rotate);
}

@mixin k-triangle-tooltips($direction: top, $size:10px, $bgColor: #ccc, $borderColor: false, $scaleX: false, $scaleY: false) {
	position: relative;
	@if ($borderColor) {
		&:before {
			@extend %k-triangle-basic;
			@include k-triangle-position($direction, $scaleX, $scaleY);
			@include k-triangle-border($direction, $size, $borderColor);
			#{$direction}: 0;
		}
		&:after{
			@extend %k-triangle-basic;
			@include k-triangle-position($direction, $scaleX, $scaleY);
			@include k-triangle-border($direction, $size, $bgColor);
			#{$direction}: 1px;
		}
	} @else {
		&:after {
			@extend %k-triangle-basic;
			@include k-triangle-position($direction, $scaleX, $scaleY);
			@include k-triangle-border($direction, $size, $bgColor);
			#{$direction}: 0;
		}
	}
}